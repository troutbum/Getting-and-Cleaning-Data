# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
data <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
countryNames <- data[[,4]]
View(data)
data[186,4]
data[186,4] <- "Sao Tome and Principe"
data[186,4]
data[99,4]
data[99,4] <- "Cote d'Ivoire"
data[99,4]
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
#
# Big problems in Quiz 3 with mixed datatypes in columns
# (Need to prevent creation of factor levels)
# read in data
data <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
data[99,4] <- "Cote d'Ivoire"
data[99,4]
data[186,4] <- "Sao Tome and Principe"
data[186,4]
countryNames <- data[[,4]]
countryNames <- data[,4]
grep("United$",countryNames) #, 3
grep("*United",countryNames) #, 5
grep("^United",countryNames) #, 3
grep("*United",countryNames) #, 2
# Getting and Cleaning Data
# May 2014
# Quiz 4
# Question 3
# In the data set from Question 2 what is a regular expression that would allow
# you to count the number of countries whose name begins with "United"? Assume
# that the variable with the country names in it is named countryNames. How many
# countries begin with United?
#
# grep("United$",countryNames), 3
# grep("*United",countryNames), 5
# grep("^United",countryNames), 3
# grep("*United",countryNames), 2
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
#
# Big problems in Quiz 3 with mixed datatypes in columns
# (Need to prevent creation of factor levels)
# read in data
data <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
data[99,4] <- "Cote d'Ivoire"
data[99,4]
data[186,4] <- "Sao Tome and Principe"
data[186,4]
countryNames <- data[,4]
grep("United$",countryNames) #, 3
grep("*United",countryNames) #, 5
grep("^United",countryNames) #, 3
grep("*United",countryNames) #, 2
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
GDP <- read.csv(xFile, skip=4, nrows=190)     # BIG LESSON limit row reads with wonky data
# weird unstable behavior downstream
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
GDP <- read.csv(xFile, skip=4, nrows=190)     # BIG LESSON limit row reads with wonky data
# weird unstable behavior downstream
View(GDP)
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
# this dataset has problem values!!!
#
GDP <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
View(GDP)
# download dataset
fileName <- "getdata-data-EDSTATS_Country.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
ED <- read.csv(xFile)
View(ED)
names(ED)
ED <- read.csv(xFile, stringsAsFactors=FALSE)
EDx <- subset(ED,, c(CountryCode, Long.Name, Special.Notes))     # remove extraneous columns
View(EDx)
ED <- read.csv(xFile, stringsAsFactors=FALSE)
View(ED)
ED <- read.csv(xFile, stringsAsFactors=FALSE)
# fix bad values
ED[38,2] <- "Republic of Cote d'Ivoire"
ED[195,4] <- "Democratic Republic of Sao Tome and Principe"
ED[195,4] <- "Republica Bolivariana de Venezuela"
View(ED)
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
# this dataset has problem values!!!
#
GDP <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
# download dataset
fileName <- "getdata-data-EDSTATS_Country.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
ED <- read.csv(xFile, stringsAsFactors=FALSE)
ED[38,2] <- "Republic of Cote d'Ivoire"
ED[195,2] <- "Democratic Republic of Sao Tome and Principe"
ED[195,2] <- "Republica Bolivariana de Venezuela"
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
# this dataset has problem values!!!
#
GDP <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
# download dataset
fileName <- "getdata-data-EDSTATS_Country.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
ED <- read.csv(xFile, stringsAsFactors=FALSE)
View(ED)
ED[38,2] <- "Republic of Cote d'Ivoire"
ED[195,2] <- "Democratic Republic of Sao Tome and Principe"
ED[223,2] <- "Republica Bolivariana de Venezuela"
View(ED)
EDx <- subset(ED,, c(CountryCode, Long.Name, Special.Notes))     # remove extraneous columns
View(EDx)
# cleanup GDP df
names(GDP)[1] <- "CountryCode"
View(GDP)
names(GDP)[2] <- "Rank"
View(GDP)
GDPx <- subset(GDP,, c(CountryCode, Rank))      # remove extraneous columns
library(plyr)
joint = join(GDPx, EDx, by="CountryCode")                                          # 190 matches, Spain is 13th
View(joint)
?grep
joint$Special.Notes
containsFY <- grep("^Fiscal",joint$Special.Notes)
containsFY2 <- grep("*Fiscal",joint$Special.Notes)
diff <- !(intersect(e,g))
diff <- !(intersect(containsFY,containsFY2))
joint(,1)diff
joint[,1]diff
which(diff)
joint[diff==TRUE,1]
diff
containsFY <- grep("^Fiscal",joint$Special.Notes)
containsFY2 <- grep("*Fiscal",joint$Special.Notes)
diff <- !(intersect(containsFY,containsFY2))
diff <- containsFY - containsFY2
containsJune <- grep("*June",joint$Special.Notes)
intersect(containsJune,containsFY2)
str(intersect(containsJune,containsFY2))
print(head(joint[,1:2], n=20))
containsFY <- grep("*Fiscal",joint$Special.Notes)
containsFY <- grep("*Fiscal",joint$Special.Notes)
containsJune <- grep("*June",joint$Special.Notes)
both <- intersect(containsFY,containsJune)
str(both)
# Question 4
joint[1,both]
both
joint[both]
joint[both,1]
joint[both,1:4]
joint[both,(1,2,4)]
joint[both,{1,2,4}]
joint[both,c(1,2,4)]
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
# this dataset has problem values!!!
#
GDP <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
# download dataset
fileName <- "getdata-data-EDSTATS_Country.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
ED <- read.csv(xFile, stringsAsFactors=FALSE)
# fix bad values
ED[38,2] <- "Republic of Cote d'Ivoire"
ED[195,2] <- "Democratic Republic of Sao Tome and Principe"
ED[223,2] <- "Republica Bolivariana de Venezuela"
EDx <- subset(ED,, c(CountryCode, Long.Name, Special.Notes))     # remove extraneous columns
# cleanup GDP df
names(GDP)[1] <- "CountryCode"
names(GDP)[2] <- "Rank"
GDPx <- subset(GDP,, c(CountryCode, Rank))      # remove extraneous columns
library(plyr)
joint = join(GDPx, EDx, by="CountryCode")                                          # 190 matches, Spain is 13th
print(head(joint[,1:2], n=20))
containsFY <- grep("*Fiscal",joint$Special.Notes)
containsJune <- grep("*June",joint$Special.Notes)
both <- intersect(containsFY,containsJune)
both
str(both)
joint[both,c(1,2,4)]
diff <- !(intersect(containsFY,containsJune))
str(diff)
summary(diff)
?intersect
diff <- setdiff(both,containsJune))
diff <- setdiff(both,containsJune)
both
containsJune
diff <- setdiff(containsJune,both)
containsFY <- grep("*Fiscal|FY",joint$Special.Notes)
# Getting and Cleaning Data
# May 2014
# Quiz 4
#
# Question 4
# Load the Gross Domestic Product data for the 190 ranked countries in this data set:
#
#         https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv
#
# Load the educational data from this data set:
#
#         https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv
#
# Match the data based on the country shortcode. Of the countries for which the
# end of the fiscal year is available, how many end in June?
#
# Original data sources:
#         http://data.worldbank.org/data-catalog/GDP-ranking-table
#         http://data.worldbank.org/data-catalog/ed-stats
# 15
# 8
# 7
# 13
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
# this dataset has problem values!!!
#
GDP <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
# download dataset
fileName <- "getdata-data-EDSTATS_Country.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
ED <- read.csv(xFile, stringsAsFactors=FALSE)
# fix bad values
ED[38,2] <- "Republic of Cote d'Ivoire"
ED[195,2] <- "Democratic Republic of Sao Tome and Principe"
ED[223,2] <- "Republica Bolivariana de Venezuela"
EDx <- subset(ED,, c(CountryCode, Long.Name, Special.Notes))     # remove extraneous columns
# cleanup GDP df
names(GDP)[1] <- "CountryCode"
names(GDP)[2] <- "Rank"
GDPx <- subset(GDP,, c(CountryCode, Rank))      # remove extraneous columns
library(plyr)
joint = join(GDPx, EDx, by="CountryCode")                                          # 190 matches, Spain is 13th
print(head(joint[,1:2], n=20))
# look for June FY
containsFY <- grep("*Fiscal|FY",joint$Special.Notes)
containsJune <- grep("*June",joint$Special.Notes)
both <- intersect(containsFY,containsJune)
both
str(both)
JuneFY <- joint[both,c(1,2,4)]
# look for June in Special.Notes without Fiscal
diff <- setdiff(containsJune,both)
JuneOnly <- joint[both,c(1,2,4)]
View(JuneFY)
View(JuneOnly)
summary(both)
str(JuneFY)
summary(JuneFY)
JuneFY
# Getting and Cleaning Data
# May 2014
# Quiz 4
#
# Question 4
# Load the Gross Domestic Product data for the 190 ranked countries in this data set:
#
#         https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv
#
# Load the educational data from this data set:
#
#         https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv
#
# Match the data based on the country shortcode. Of the countries for which the
# end of the fiscal year is available, how many end in June?
#
# Original data sources:
#         http://data.worldbank.org/data-catalog/GDP-ranking-table
#         http://data.worldbank.org/data-catalog/ed-stats
# 15
# 8
# 7
# 13
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
# download dataset
fileName <- "getdata-data-GDP.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
# this dataset has problem values!!!
#
GDP <- read.csv(xFile, stringsAsFactors=FALSE,skip=4,nrows=190)
# fix bad values
GDP[99,4] <- "Cote d'Ivoire"
GDP[186,4] <- "Sao Tome and Principe"
# download dataset
fileName <- "getdata-data-EDSTATS_Country.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
xFile <- paste0(filePath, fileName)
if (!file.exists(xFile)) {
download.file(fileUrl, destfile = xFile, method ="curl")
dateDownloaded <- date()
}
# read in dataset
ED <- read.csv(xFile, stringsAsFactors=FALSE)
# fix bad values
ED[38,2] <- "Republic of Cote d'Ivoire"
ED[195,2] <- "Democratic Republic of Sao Tome and Principe"
ED[223,2] <- "Republica Bolivariana de Venezuela"
EDx <- subset(ED,, c(CountryCode, Long.Name, Special.Notes))     # remove extraneous columns
# cleanup GDP df
names(GDP)[1] <- "CountryCode"
names(GDP)[2] <- "Rank"
GDPx <- subset(GDP,, c(CountryCode, Rank))      # remove extraneous columns
library(plyr)
joint = join(GDPx, EDx, by="CountryCode")                                          # 190 matches, Spain is 13th
print(head(joint[,1:2], n=20))
# look for June FY
containsFY <- grep("*Fiscal|FY",joint$Special.Notes)
containsJune <- grep("*June",joint$Special.Notes)
both <- intersect(containsFY,containsJune)
both
str(both)
JuneFY <- joint[both,c(1,2,4)]
row.names(JuneFY) <- NULL                                      # remove row.names system added column
str(JuneFY)
JuneFY
# look for June in Special.Notes without Fiscal
diff <- setdiff(containsJune,both)
JuneOnly <- joint[both,c(1,2,4)]
row.names(JuneOnly) <- NULL
install.packages("quantmod")
library(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
View(amzn)
install.packages("lubridate")
library(lubridate)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
