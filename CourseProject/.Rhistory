col.names=c("id"))
# description labels for the 6 possible activities
activity.labels <- read.table(paste(filePath,"activity_labels.txt"sep=""),
col.names=c("id","activity"))
activity.id <- read.table(paste(filePath,"test/y_test.txt",sep=""),
col.names=c("id"))
# description labels for the 6 possible activities
activity.labels <- read.table(paste(filePath,"activity_labels.txt",sep=""),
col.names=c("id","activity"))
# subject ID for each observation (30 possible volunteers)
subject.id <- read.table(paste(filePath,"subject_test.txt",sep=""),
col.names=c("subject.id"))
# subject ID for each observation (30 possible volunteers)
subject.id <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
data = rbind(data.train,data.test)
View(data)
identical(data.train,data.test)
identical(head(data.train),head(data))
identical(tail(data.train),head(data))
identical(tail(data.test),head(data))
identical(tail(data.train),tail(data))
identical(tail(data.test),tail(data))
identical(head(data.train),head(data))
tail(data)
str(tail(data))
summary(tail(data))
identical(tail(data),tail(data.test))
identical(tail(data.test),tail(data))
data = rbind(data.train,data.test)
identical(head(data.train),head(data))
identical(head(data),head(data.train))
identical(tail(data),tail(data.test))
str(data)
View(data)
data[10299,]
identical(data[10299,],data.test[2947,])
t <- data.test[2947,]
View(t)
View(data)
View(t)
t2 = data.test[2947,]
View(`t2`)
identical
?identical
?diff
?compare
t1 <- tail(data)
t2 <- tail(data.test)
View(`t1`)
View(`t2`)
View(`t1`)
h1 <- head(data)
View(`h1`)
tail(data)
head(data)
?tail
identical(head(data.train,addrownums = FALSE),head(data,addrownums = FALSE))
identical(tail(data.test,addrownums = FALSE),tail(data,addrownums = FALSE))
t1 <- tail(data.test,addrownums = FALSE)
View(`t1`)
t3 <- tail(data.test,addrownums = FALSE)
View(`t3`)
View(`h1`)
View(`t2`)
identical(tail(data.test,n=1, addrownums = FALSE),tail(data,n=1,addrownums = FALSE))
tail(data.test,n=1, addrownums = FALSE
)
p1 = tail(data.test,n=1, addrownums = FALSE)
View(`p1`)
?tail
tail(data.test,n=1, addrownums = FALSE)
tail(data,n=1, addrownums = FALSE)
tail(data,n=1, addrownums==FALSE)
tail(data,n=1, addrownums=FALSE)
tail(data,n=1,addrownums=FALSE)
tail(data,n=1L,addrownums=FALSE)
tail(data,n=1,addrownums=FALSE)
# download file if it isn't already there
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "getdata-projectfiles-UCI HAR Dataset.zip", method ="curl")
dateDownloaded <- date()
}
filePath <- "./UCI HAR Dataset/"
features.txt <- read.table(paste(filePath,"features.txt",sep=""))    # use for column names
variable.names <- as.character(features.txt[,2])                # column labels for dataset
# create logical vector to extract a subset of columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)                # finds and replaces bad characters
names <- gsub("-","",names,fixed=TRUE)                          # from dataset
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in training measurements (7352 rows)
measurements.train <- read.table(paste(filePath,"train/X_train.txt",sep=""),
col.names=as.character(names))
# read in test measurements (2947 rows)
measurements.test <- read.table(paste(filePath,"test/X_test.txt",sep=""),
col.names=as.character(names))
data.train <- measurements.train[,selected.cols == TRUE]
data.test <- measurements.test[,selected.cols == TRUE]
data = rbind(data.train,data.test)
# subject ID for each observation (30 possible volunteers)
subject.id <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
# activity ID for each observation
activity.id <- read.table(paste(filePath,"test/y_test.txt",sep=""),
col.names=c("id"))
# description labels for the 6 possible activities
activity.labels <- read.table(paste(filePath,"activity_labels.txt",sep=""),
col.names=c("id","activity"))
View(subject.id)
View(activity.id)
View(subject.id)
View(activity.labels)
View(subject.id)
subject.id.train <- read.table(paste(filePath,"train/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id.test <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id = rbind(subject.id.train,subject.id.test)
subject.id.train <- read.table(paste(filePath,"train/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id.train <- read.table(paste(filePath,"train/subject_train.txt",sep=""),
col.names=c("subject.id"))
subject.id.test <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id = rbind(subject.id.train,subject.id.test)
# download file if it isn't already there
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "getdata-projectfiles-UCI HAR Dataset.zip", method ="curl")
dateDownloaded <- date()
}
# read in variable names
filePath <- "./UCI HAR Dataset/"
features.txt <- read.table(paste(filePath,"features.txt",sep=""))    # use for column names
variable.names <- as.character(features.txt[,2])                # column labels for dataset
# create logical vector to extract a subset of columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)                # finds and replaces bad characters
names <- gsub("-","",names,fixed=TRUE)                          # from dataset
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in training measurements (7352 rows)
measurements.train <- read.table(paste(filePath,"train/X_train.txt",sep=""),
col.names=as.character(names))
# read in test measurements (2947 rows)
measurements.test <- read.table(paste(filePath,"test/X_test.txt",sep=""),
col.names=as.character(names))
#identical(head(data.train),head(data))
#identical(tail(data.test,n=1, addrownums = FALSE),             # BUG? can't suppress added row.names
#          tail(data,n=1,addrownums = FALSE))
# extract columns of interest using logical vector
data.train <- measurements.train[,selected.cols == TRUE]
data.test <- measurements.test[,selected.cols == TRUE]
data = rbind(data.train,data.test)                              # combine training and test rows
# subject ID for each observation (30 possible volunteers)
subject.id.train <- read.table(paste(filePath,"train/subject_train.txt",sep=""),
col.names=c("subject.id"))
subject.id.test <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id = rbind(subject.id.train, subject.id.test)
# activity ID for each observation
activity.id.train <- read.table(paste(filePath,"train/y_train.txt",sep=""),
col.names=c("id"))
activity.id.test <- read.table(paste(filePath,"test/y_test.txt",sep=""),
col.names=c("id"))
activity.id = rbind(activity.id.train, activity.id.test)
# description labels for the 6 possible activities
activity.labels <- read.table(paste(filePath,"activity_labels.txt",sep=""),
col.names=c("id","activity"))
View(subject.id)
View(activity.id)
View(activity.labels)
View(data)
library(plyr)
activity = join(activity.id, activity.labels)
View(activity)
View(activity)
activity = join(activity.id, activity.labels)
# add subject.id and activity columns to dataset
results <- cbind(activity$activity, data )
View(results)
results <- cbind(subject.id, results)
View(results)
?sort
str(results)
foo <= results(order(subject.id))
foo <- results(order(subject.id))
foo <- results[order(subject.id)]
View(results)
foo <- results[order(results$subject.id)]
foo <- results[order(results$subject.id),]
View(foo)
tail(foo)
tail(foo)
tail(subject.id)
sum(is.na(results))
foo <- results[order(results$subject.id),addrownum=FALSE]
row.names(foo) <- NULL
View(foo)
View(foo)
?col.names
View(data.test)
View(data.train)
t1 <- ail(data.test,n=1, addrownums = FALSE)
t1 <- tail(data.test,n=1, addrownums = FALSE)
View(`t1`)
t2 <- tail(data,n=1,addrownums = FALSE)
View(`t2`)
View(`t1`)
View(`t2`)
View(`t1`)
identical(t1,t2)
row.names(t1) <- NULL
row.names(t2) <- NULL
identical(t1,t2)
t1 <- tail(data.test, n=100, addrownums = FALSE)
t2 <- tail(data, n=100, addrownums = FALSE)
row.names(t1) <- NULL
row.names(t2) <- NULL
identical(t1,t2)
?cbind
?col.names
?row.names
?names
names(foo)
names(foo)[2] <- "activity"
names(foo)
names(results)[2] <- "activity"
View(results)
results <- cbind(activity$activity, data )
View(results)
names(results)[2] <- "activity"
View(results)
x <- cbind(activity$activity, data )
View(x)
names(x)[2] <- "activity"                                       # rename added column
View(x)
x <- cbind(activity$activity, data )
View(x)
names(x)[1] <- "activity"                                       # rename added column
View(x)
y <- cbind(subject.id, x)
View(y)
results <- y[order(y$subject.id, y$activity),]
View(results)
# Getting and Cleaning Data
# Course Project
#
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
#
# download file if it isn't already there
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "getdata-projectfiles-UCI HAR Dataset.zip", method ="curl")
dateDownloaded <- date()
}
# read in variable names
filePath <- "./UCI HAR Dataset/"
features.txt <- read.table(paste(filePath,"features.txt",sep=""))    # use for column names
variable.names <- as.character(features.txt[,2])                # column labels for dataset
# create logical vector to extract a subset of columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)                # finds and replaces bad characters
names <- gsub("-","",names,fixed=TRUE)                          # from dataset
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in training measurements (7352 rows)
measurements.train <- read.table(paste(filePath,"train/X_train.txt",sep=""),
col.names=as.character(names))
# read in test measurements (2947 rows)
measurements.test <- read.table(paste(filePath,"test/X_test.txt",sep=""),
col.names=as.character(names))
# extract columns of interest using logical vector
data.train <- measurements.train[,selected.cols == TRUE]
data.test <- measurements.test[,selected.cols == TRUE]
data = rbind(data.train, data.test)                             # combine training and test rows
## Verify row binding of datasets
#
#identical(head(data.train),head(data))
#
#identical(tail(data.test,n=1, addrownums = FALSE),             # BUG? can't suppress added row.names
#          tail(data,n=1,addrownums = FALSE))
#
# t1 <- tail(data.test, n=100, addrownums = FALSE)              # FIX BUG using row.names(t1) <- NULL
# t2 <- tail(data, n=100, addrownums = FALSE)
# row.names(t1) <- NULL
# row.names(t2) <- NULL
# identical(t1,t2)
# subject ID for each observation (30 possible volunteers)
subject.id.train <- read.table(paste(filePath,"train/subject_train.txt",sep=""),
col.names=c("subject.id"))
subject.id.test <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id = rbind(subject.id.train, subject.id.test)
# activity ID for each observation
activity.id.train <- read.table(paste(filePath,"train/y_train.txt",sep=""),
col.names=c("id"))
activity.id.test <- read.table(paste(filePath,"test/y_test.txt",sep=""),
col.names=c("id"))
activity.id = rbind(activity.id.train, activity.id.test)
# description labels for the 6 possible activities
activity.labels <- read.table(paste(filePath,"activity_labels.txt",sep=""),
col.names=c("id","activity"))
# join tables to get better activity descriptors
library(plyr)
activity = join(activity.id, activity.labels)
# add subject.id and activity columns to dataset
x <- cbind(activity$activity, data )
names(x)[1] <- "activity"                                       # rename added column
y <- cbind(subject.id, x)
# sort by subject.id, activity
results <- y[order(y$subject.id, y$activity),]
row.names(results) <- NULL                                      # remove row.names system added column
View(results)
t <- tail(results)
View(t)
t <- tail(results, addrownums=FALSE)
t
View(t)
View(t)
row.names(t) <- NULL
View(t)
h <- head(results)
View(h)
write.table(results, "results.txt", sep="\t")
write.table(results, "results.txt", sep=",")
foo <- read.csv("results.txt")
View(foo)
identical(results, foo)
View(results)
identical(head(results),head(foo))
write.table(results, "results.txt", sep="\t")
foo <- read.table("results.txt")
identical(head(results),head(foo))
View(results)
View(foo)
str(results)
str(foo)
?write
identical(str(results),str(foo))
identical(head(results),head(foo))
identical(head(results),head(foo))
identical(head(results,addrownum=FALSE),head(foo,addrownum=FALSE))
head(results)
head(foo)
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "getdata-projectfiles-UCI HAR Dataset.zip"
download.file(fileUrl, destfile=fileName, method ="curl")
unzip(fileName)
dateDownloaded <- date()
}
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "getdata-projectfiles-UCI HAR Dataset.zip"
download.file(fileUrl, destfile=fileName, method ="curl")
unzip(fileName)
dateDownloaded <- date()
}
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "getdata-projectfiles-UCI HAR Dataset.zip"
download.file(fileUrl, destfile=fileName, method ="curl")
unzip(fileName)
dateDownloaded <- date()
}
# Getting and Cleaning Data
# Course Project
# The purpose of this project is to demonstrate your ability to collect, work
# with, and clean a data set. The goal is to prepare tidy data that can be used
# for later analysis. You will be graded by your peers on a series of yes/no
# questions related to the project. You will be required to submit: 1) a tidy
# data set as described below, 2) a link to a Github repository with your script
# for performing the analysis, and 3) a code book that describes the variables,
# the data, and any transformations or work that you performed to clean up the
# data called CodeBook.md. You should also include a README.md in the repo with
# your scripts. This repo explains how all of the scripts work and how they are
# connected.
#
# One of the most exciting areas in all of data science right now is wearable
# computing - see for example this article . Companies like Fitbit, Nike, and
# Jawbone Up are racing to develop the most advanced algorithms to attract new
# users. The data linked to from the course website represent data collected
# from the accelerometers from the Samsung Galaxy S smartphone. A full
# description is available at the site where the data was obtained:
#
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
#
# Here are the data for the project:
#
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
#
# You should create one R script called run_analysis.R that does the following.
# Merges the training and the test sets to create one data set. Extracts only
# the measurements on the mean and standard deviation for each measurement. Uses
# descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive activity names. Creates a
# second, independent tidy data set with the average of each variable for each
# activity and each subject.
# download file if it isn't already there
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "getdata-projectfiles-UCI HAR Dataset.zip"
download.file(fileUrl, destfile=fileName, method ="curl")
unzip(fileName)
dateDownloaded <- date()
}
# unzip file
# read in variable names
filePath <- "./UCI HAR Dataset/"
features.txt <- read.table(paste(filePath,"features.txt",sep=""))    # use for column names
variable.names <- as.character(features.txt[,2])                # column labels for dataset
# create logical vector to extract a subset of columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)                # finds and replaces bad characters
names <- gsub("-","",names,fixed=TRUE)                          # from dataset
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in training measurements (7352 rows)
measurements.train <- read.table(paste(filePath,"train/X_train.txt",sep=""),
col.names=as.character(names))
# read in test measurements (2947 rows)
measurements.test <- read.table(paste(filePath,"test/X_test.txt",sep=""),
col.names=as.character(names))
# extract columns of interest using logical vector
data.train <- measurements.train[,selected.cols == TRUE]
data.test <- measurements.test[,selected.cols == TRUE]
data = rbind(data.train, data.test)                             # combine training and test rows
## Verify row binding of datasets
#
#identical(head(data.train),head(data))
#
#identical(tail(data.test,n=1, addrownums = FALSE),             # BUG? can't suppress added row.names
#          tail(data,n=1,addrownums = FALSE))
#
# t1 <- tail(data.test, n=100, addrownums = FALSE)              # FIX BUG using row.names(t1) <- NULL
# t2 <- tail(data, n=100, addrownums = FALSE)
# row.names(t1) <- NULL
# row.names(t2) <- NULL
# identical(t1,t2)
# subject ID for each observation (30 possible volunteers)
subject.id.train <- read.table(paste(filePath,"train/subject_train.txt",sep=""),
col.names=c("subject.id"))
subject.id.test <- read.table(paste(filePath,"test/subject_test.txt",sep=""),
col.names=c("subject.id"))
subject.id = rbind(subject.id.train, subject.id.test)
# activity ID for each observation
activity.id.train <- read.table(paste(filePath,"train/y_train.txt",sep=""),
col.names=c("id"))
activity.id.test <- read.table(paste(filePath,"test/y_test.txt",sep=""),
col.names=c("id"))
activity.id = rbind(activity.id.train, activity.id.test)
# description labels for the 6 possible activities
activity.labels <- read.table(paste(filePath,"activity_labels.txt",sep=""),
col.names=c("id","activity"))
# join tables to get activity description instead of activity number
library(plyr)
activity = join(activity.id, activity.labels)
# combine dataset with Subject ID and Activity columns
x <- cbind(activity$activity, data )
names(x)[1] <- "activity"                                       # rename added column
y <- cbind(subject.id, x)
# sort dataset by (subject.id, activity)
results <- y[order(y$subject.id, y$activity),]
row.names(results) <- NULL                                      # remove row.names system added column
write.table(results, "results.txt", sep="\t")
foo <- read.table("results.txt")
View(results)
View(foo)
write.csv(results, "results.csv", sep="\t")
write.csv(results, "results.csv")
foo <- read.csv("results.csv")
identical(results,foo)
head(foo)
head(results)
identical(head(foo),head(results))
View(foo)
?read.csv
foo <- read.csv("results.csv",row.names=NULL)
View(foo)
write.csv(results, "results.csv")
write.csv(results, "results.csv",row.names=NULL)
?write.table
write.csv(results, "results.csv",row.names=FALSE)
foo <- read.csv("results.csv")
View(foo)
identical(head(foo),head(results))
identical(results,foo)
write.csv(results, "results.csv",row.names=FALSE)               # caution: row.names added by default
verify.results <- read.csv("results.csv")
identical(results,verify.results)
str(results)
?gl
results$subject.id
results$subject.id <-factor(results$subject.id)
str(results)
