makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached
inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
size <- 10                                      # create data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
M1 <- makeCacheMatrix()                         # create caching data structure
M1
environment(M1)
M1$set(mydata)                                  # place data into structure
M1$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(M1)                          # calculate the inverse
imat_cached <- cacheSolve(M1)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                    # verify inverse and cached inversed are the same
test <- mydata %*% imat                         # verify matrix %*% inverse = identity matrix
View(test)
## R Programming - April 2014
## Programming Assignment 2 - Caching the Inverse of a Matrix
##
# In this example we introduce the <<- operator which can be used to assign a
# value to an object in an environment that is different from the current
# environment.
# Below are two functions that are used to create a special object
# that stores a matrix and cache's its inverse.
#
# The first function, makeVector creates a special "vector", which is really a
# list containing a function to:
# - set the matrix
# - get matrix
# - set matrix inverse
# - get matrix inverse
makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
# The second function calculates the inverse of the object. It checks to see if the inverse
# has already been calculated. Ff not, it calculates the inverse and stores it
# in the object.  Returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
# Now use these functions to generate an inverse matrix and cache it. Verify that
# the calculated and cached inverses are identical Verify that the matrix
# multiplied by its inverse is equal to the identity matrix
size <- 10                                       # create test data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
mat <- makeCacheMatrix()                         # create caching data structure
mat
mat$set(mydata)                                  # place data into structure
mat$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(mat)                          # calculate the inverse
imat_cached <- cacheSolve(mat)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                     # verify inverse and cached inversed are the same
test <- mydata %*% imat                          # verify matrix %*% inverse = identity matrix
View(test)
Food_Display_Table <- read.table("~/Downloads/MyFoodapediaData/Food_Display_Table.xml", quote="\"")
View(Food_Display_Table)
Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_ <- read.csv("~/Downloads/Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis-Related_Groups__DRG_.csv")
View(Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_)
R.Version()
install.packages("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/NGAP.xlsx", method ="curl")
library(xlsx)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("./data/NGAP.xlsx,sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex")
?read.xlsx
?xlsx
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=0 ,colIndex=colIndex, rowIndex=rowIndex")
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=1 ,colIndex=colIndex, rowIndex=rowIndex")
install.packages("RMySQL")
install.packages(c("MASS", "swirl"))
install.packages("RMySQL")
setwd("~/CourseraHW/Getting-and-Cleaning-Data/CourseProject")
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./data/rawdata.csv", method ="curl")
dateDownloaded <- date()
}
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
test1 <- grepl("mean()",variable.names,fixed=TRUE)   # returns logical vector
test2 <- grepl("std()",variable.names,fixed=TRUE)
both <- test1 | test2
str(both)
summary(both)
summary(test1)
summary(test2)
# download file if it isn't already there
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./data/rawdata.csv", method ="curl")
dateDownloaded <- date()
}
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(variable.names))  # raw measurements (2947 rows)
names <- gsub("mean()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names
names <- gsub("-","",variable.names,fixed=TRUE)
names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names
names <- gsub("-","",names,fixed=TRUE)
names
names <- gsub(",","to",names,fixed=TRUE)
names
foo <- variable.names .* selected.cols
foo <- variable.names * selected.cols
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
View(measurements)
summary(selected.cols)
x <- measurements[,selected.cols == TRUE]
View(x)
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
names <- gsub("mean",".mean.",names,fixed=TRUE)
names <- gsub("std",".std.",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
measurements.subset <- measurements[,selected.cols == TRUE]
View(measurements.subset)
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
measurements.subset <- measurements[,selected.cols == TRUE]
View(measurements.subset)
activity.number <- read.table("./UCI HAR Dataset/test/y_test.txt")  # activity (number) corresponding to each measurements
subject.id <- read.table("./UCI HAR Dataset/test/subject_test.txt")  # subject ID (30 volunteers total)
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt") # description labels for the 6 activities
View(activity.labels)
View(activity.number)
View(subject.id)
names(measurements.subset)
names(activity.labels)
names(activity.number)
View(activity.labels)
View(activity.number)
j1 = join(subject.id,measurements.subset)
library(plyr)
j1 = join(subject.id,measurements.subset)
View(`j1`)
str(subject.id)
str(measurements.subset)
m1 = merge(subject.id,measurements.subset)
foo <- cbind(subject.id,measurements.subset)
View(foo)
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt"
col.names=c("id","activity")) # description labels for the 6 activities
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt"
col.names=c(id,activity)) # description labels for the 6 activities
?read.table
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names=c("id","activity")) # description labels for the 6 activities
View(activity.number)
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
measurements.subset <- measurements[,selected.cols == TRUE]
activity.number <- read.table("./UCI HAR Dataset/test/y_test.txt")  # activity (number) corresponding to each measurements
subject.id <- read.table("./UCI HAR Dataset/test/subject_test.txt")  # subject ID (30 volunteers total)
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names=c("id","activity")) # description labels for the 6 activities
View(activity.labels)
View(activity.number)
activity.number <- read.table("./UCI HAR Dataset/test/y_test.txt",
col.names=c("id"))
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names=c("id","activity")) # description labels for the 6 activities
subject.id <- read.table("./UCI HAR Dataset/test/subject_test.txt",
col.names=c("subject.id")))  # subject ID (30 volunteers total)
View(activity.labels)
View(activity.number)
View(subject.id)
View(subject.id)
View(subject.id)
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
measurements.subset <- measurements[,selected.cols == TRUE]
# activity ID for each observation
activity.number <- read.table("./UCI HAR Dataset/test/y_test.txt",
col.names=c("id"))
# description labels for the 6 possible activities
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names=c("id","activity"))
# subject ID for each observation (30 possible volunteers)
subject.id <- read.table("./UCI HAR Dataset/test/subject_test.txt",
col.names=c("subject.id"))
View(activity.labels)
View(activity.number)
View(features.txt)
foo = join(activity.id,activity.labels)
foo = merge(activity.id,activity.labels, by="id")
foo = merge(activity.labels,activity.id, by="id")
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
measurements.subset <- measurements[,selected.cols == TRUE]
# activity ID for each observation
activity.id <- read.table("./UCI HAR Dataset/test/y_test.txt",
col.names=c("id"))
# description labels for the 6 possible activities
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names=c("id","activity"))
# subject ID for each observation (30 possible volunteers)
subject.id <- read.table("./UCI HAR Dataset/test/subject_test.txt",
col.names=c("subject.id"))
foo = join(activity.id,activity.labels)
View(foo)
activity.col = join(activity.id,activity.labels)
View(activity.col)
x <- cbind(activity.col$activity,measurements.subset )
View(x)
activity = join(activity.id, activity.labels)
x <- cbind(activity[,2], measurements.subset )
View(x)
activity.table = join(activity.id, activity.labels)
activity = activity.table[,2]
activity = join(activity.id, activity.labels)
# add subject.id and activity columns to dataset
x <- cbind(activity$activity, measurements.subset )
x <- cbind(subject.id, x)
View(x)
# Getting and Cleaning Data
# Course Project
#
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
#
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
#
# download file if it isn't already there
if (!file.exists("getdata-projectfiles-UCI HAR Dataset.zip")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./data/rawdata.csv", method ="curl")
dateDownloaded <- date()
}
# read in column variable names
features.txt <- read.table("./UCI HAR Dataset/features.txt")            # column labels for dataset
variable.names <- as.character(features.txt[,2])                        # create char vector of column labels
# create logical vector to subset columns
contains.mean <- grepl("mean()",variable.names,fixed=TRUE)      # returns logical vector containing "mean()"
contains.std <- grepl("std()",variable.names,fixed=TRUE)        # and "std()"
selected.cols <- contains.mean | contains.std                   # use this logical vector to subset columns
# initial clean up of variable names
names <- gsub("()","",variable.names,fixed=TRUE)            # finds and replaces bad chars
names <- gsub("-","",names,fixed=TRUE)
names <- gsub("mean",".Mean",names,fixed=TRUE)
names <- gsub("std",".Std",names,fixed=TRUE)
# read in measurement data and append column cleaned names
measurements <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names=as.character(names))  # raw measurements (2947 rows)
measurements.subset <- measurements[,selected.cols == TRUE]
# activity ID for each observation
activity.id <- read.table("./UCI HAR Dataset/test/y_test.txt",
col.names=c("id"))
# description labels for the 6 possible activities
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names=c("id","activity"))
# subject ID for each observation (30 possible volunteers)
subject.id <- read.table("./UCI HAR Dataset/test/subject_test.txt",
col.names=c("subject.id"))
# join tables to get better activity descriptors
library(plyr)
activity = join(activity.id, activity.labels)
# add subject.id and activity columns to dataset
x <- cbind(activity$activity, measurements.subset )
x <- cbind(subject.id, x)
View(x)
