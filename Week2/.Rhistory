makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached
inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
size <- 10                                      # create data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
M1 <- makeCacheMatrix()                         # create caching data structure
M1
environment(M1)
M1$set(mydata)                                  # place data into structure
M1$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(M1)                          # calculate the inverse
imat_cached <- cacheSolve(M1)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                    # verify inverse and cached inversed are the same
test <- mydata %*% imat                         # verify matrix %*% inverse = identity matrix
View(test)
## R Programming - April 2014
## Programming Assignment 2 - Caching the Inverse of a Matrix
##
# In this example we introduce the <<- operator which can be used to assign a
# value to an object in an environment that is different from the current
# environment.
# Below are two functions that are used to create a special object
# that stores a matrix and cache's its inverse.
#
# The first function, makeVector creates a special "vector", which is really a
# list containing a function to:
# - set the matrix
# - get matrix
# - set matrix inverse
# - get matrix inverse
makeCacheMatrix <- function(x = matrix()) {
invCached <- matrix(data = NA, nrow = 1,                # set cached inverse matrix to "empty"
ncol = 1, byrow = FALSE,
dimnames = NULL)
set <- function(y) {                                    # method to store data matrix
x <<- y
invCached <<- matrix(NA, 1, 1, FALSE, NULL)     # reset cached inverse to "empty"
}
get <- function() x                                     # method to retrieve data matrix
setInverse <- function(inverse) invCached <<- inverse   # method to store mean
getInverse <- function() invCached                      # method to retrieve mean
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
# The second function calculates the inverse of the object. It checks to see if the inverse
# has already been calculated. Ff not, it calculates the inverse and stores it
# in the object.  Returns a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()               # retrieve cached inverse
if(!is.na(inverse[1,1])) {              # if not empty, return cached inverse
message("getting cached inverse matrix")
return(inverse)                 # use invisible(inverse) to suppress print()
}
data <- x$get()                         # otherwise get cached data
inverse <- solve(data, ...)             # calculate the inverse
x$setInverse(inverse)                   # save the inverse into cache
inverse
}
# Now use these functions to generate an inverse matrix and cache it. Verify that
# the calculated and cached inverses are identical Verify that the matrix
# multiplied by its inverse is equal to the identity matrix
size <- 10                                       # create test data (square matrix)
mydata <- matrix(rnorm(size*size), size, size)
mat <- makeCacheMatrix()                         # create caching data structure
mat
mat$set(mydata)                                  # place data into structure
mat$getInverse()                                 # get inverse (empty at this point)
imat <- cacheSolve(mat)                          # calculate the inverse
imat_cached <- cacheSolve(mat)                   # caculate the inverse again (retrieved cached value)
identical(imat, imat_cached)                     # verify inverse and cached inversed are the same
test <- mydata %*% imat                          # verify matrix %*% inverse = identity matrix
View(test)
Food_Display_Table <- read.table("~/Downloads/MyFoodapediaData/Food_Display_Table.xml", quote="\"")
View(Food_Display_Table)
Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_ <- read.csv("~/Downloads/Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis-Related_Groups__DRG_.csv")
View(Inpatient_Prospective_Payment_System__IPPS__Provider_Summary_for_the_Top_100_Diagnosis.Related_Groups__DRG_)
R.Version()
install.packages("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/NGAP.xlsx", method ="curl")
library(xlsx)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("./data/NGAP.xlsx,sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex")
?read.xlsx
?xlsx
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=0 ,colIndex=colIndex, rowIndex=rowIndex")
dat <- read.xlsx("./data/NGAP.xlsx, sheetIndex=1 ,colIndex=colIndex, rowIndex=rowIndex")
install.packages("RMySQL")
install.packages(c("MASS", "swirl"))
install.packages("RMySQL")
# Getting and Cleaning Data
# Week 2 Quiz
library(httr)
library(httpuv)
library(jsonlite)
# authentication step for GitHub
# creates and stores a token on disk
myapp <- oauth_app("github", "20e38d750fc50cb0a619", "7d69ed95da7fda0f4f8060022d67b9865b18ef32")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# access API example
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
# Question 1
#
# Register an application with the Github API here
# https://github.com/settings/applications. Access the API to get information on
# your instructors repositories (hint: this is the url you want
# "https://api.github.com/users/jtleek/repos"). Use this data to find the time
# that the datasharing repo was created. What time was it created?
#This tutorial may be useful (https://github.com/hadley/httr/blob/master/demo/oauth2-github.r).
# First attempt at getting answer
# Get JSON object of prof's repos
url <- "https://api.github.com/users/jtleek/repos"
req <-GET(url, config(token = github_token))
stop_for_status(req)
content(req)
#foo <- content(req, as= "parsed")
# this method not easy to read or parse without further
# understanding of API
# Easy method to get dataframe of prof's GitHub repos
data <- fromJSON(url)
dfNames <- names(data)
dfNames
subdata <- subset(data, name == "datasharing")  # just get repo in question
# Answer
subdata$created_at  # "2013-11-07T13:25:07Z"
# Getting and Cleaning Data
# Week 2 Quiz (Questions 2 & 3 using sqldf package)
# Question 2
# The sqldf package allows for execution of SQL commands on R data
# frames. We will use the sqldf package to practice the queries we might send
# with the dbSendQuery command in RMySQL. Download the American Community Survey
# data and load it into an R object called acs
#
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
#
# Which of the following commands will select only the data for the probability
# weights pwgtp1 with ages less than 50?
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
if (!file.exists("data/rawdata.csv")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./data/rawdata.csv", method ="curl")
dateDownloaded <- date()
}
# read in csv file and put into object called "acs"
acs <- read.csv("./data/rawdata.csv")
library(sqldf)
answer1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
answer2 <- sqldf("select * from acs")
answer3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
answer4 <- sqldf("select pwgtp1 from acs")
str(answer1)  # answer1
# Question 3
# Using the same data frame you created in the previous problem, what
# is the equivalent function to unique(acs$AGEP)
control <- unique(acs$AGEP)
answerA <- sqldf("select distinct pwgtp1 from acs")
answerB <- sqldf("select unique * from acs")
answerC <- sqldf("select distinct AGEP from acs")
answerD <- sqldf("select AGEP where unique from acs")
# answerC (91 observations of 1 variable)
install.packages("sqldf")
setwd("~/CourseraHW/Getting-and-Cleaning-Data/Week2")
# Getting and Cleaning Data
# Week 2 Quiz (Questions 2 & 3 using sqldf package)
# Question 2
# The sqldf package allows for execution of SQL commands on R data
# frames. We will use the sqldf package to practice the queries we might send
# with the dbSendQuery command in RMySQL. Download the American Community Survey
# data and load it into an R object called acs
#
# https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
#
# Which of the following commands will select only the data for the probability
# weights pwgtp1 with ages less than 50?
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
if (!file.exists("data/rawdata.csv")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./data/rawdata.csv", method ="curl")
dateDownloaded <- date()
}
# read in csv file and put into object called "acs"
acs <- read.csv("./data/rawdata.csv")
library(sqldf)
answer1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
answer2 <- sqldf("select * from acs")
answer3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
answer4 <- sqldf("select pwgtp1 from acs")
str(answer1)  # answer1
# Question 3
# Using the same data frame you created in the previous problem, what
# is the equivalent function to unique(acs$AGEP)
control <- unique(acs$AGEP)
answerA <- sqldf("select distinct pwgtp1 from acs")
answerB <- sqldf("select unique * from acs")
answerC <- sqldf("select distinct AGEP from acs")
answerD <- sqldf("select AGEP where unique from acs")
# answerC (91 observations of 1 variable)
View(answerC)
str(answerC)
str(control)
foo < as.integer(answerC)
foo <- as.integer(answerC)
summary(answerC)
summary(control)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
answer <- c(nchar(htmlCode[10]),
nchar(htmlCode[20]),
nchar(htmlCode[30]),
nchar(htmlCode[100]))
answer
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
if (!file.exists("data/fixedwidth.for")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile = "./data/fixedwidth.for", method ="curl")
dateDownloaded <- date()
}
data <- read.fwf("./data/fixedwidth.for", widths=c(9,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
View(data)
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
View(data)
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=4)
View(data)
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
View(data)
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=4)
View(data)
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=4,col.names=c("N1sst","N1ssta","N2sst","N2ssta","N3sst","N3ssta","N4sst","N4ssta")))
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=4,col.names=c("N1sst","N1ssta","N2sst","N2ssta","N3sst","N3ssta","N4sst","N4ssta"))))
data <- read.fwf("./data/fixedwidth.for", widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),skip=4,col.names=c("N1sst","N1ssta","N2sst","N2ssta","N3sst","N3ssta","N4sst","N4ssta"))
data <- read.fwf("./data/fixedwidth.for",
widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4,
col.names=c("Date","N1sst","N1ssta","N2sst","N2ssta","N3sst","N3ssta","N4sst","N4ssta"))
View(data)
sum(data[,4])
sum(data[,4])/1254
# Getting and Cleaning Data
# Week 2 Quiz
# Question 4
# How many characters are in the 10th, 20th, 30th and 100th lines of HTML from this page:
#
#         http://biostat.jhsph.edu/~jleek/contact.html
#
# (Hint: the nchar() function in R may be helpful)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
answer <- c(nchar(htmlCode[10]),
nchar(htmlCode[20]),
nchar(htmlCode[30]),
nchar(htmlCode[100]))
answer
# [1] 45 31  7 25
# Question 5
# Read this data set into R and report the sum of the numbers in the fourth column.
#
# https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for
#
# Original source of the data: http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for
#
# (Hint this is a fixed width file format)
# create a data subdirectory if it does not exist
if (!file.exists("data")) {
dir.create("data")
}
# download file if it isn't already there
if (!file.exists("data/fixedwidth.for")) {
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile = "./data/fixedwidth.for", method ="curl")
dateDownloaded <- date()
}
data <- read.fwf("./data/fixedwidth.for",
widths=c(10,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4,
col.names=c("Date","N1sst","N1ssta","N2sst","N2ssta","N3sst","N3ssta","N4sst","N4ssta"))
View(data)
sum(data[,4])
# [1] 32426.7
sum(data[,4])/1254  #reasonability check
#[1] 25.85861
